/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2015-2019 The original authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'org.kordamp.gradle.kordamp-parentpom' version '1.6.0'
    id 'org.kordamp.gradle.source-xref'       version '0.26.0'
}

config {
    info {
        name          = 'DesktopPaneFX'
        description   = 'MDI components for JavaFX'
        inceptionYear = '2015'
        tags          = ['mdi', 'javafx']

        specification { enabled = false }

        credentials {
            sonatype {
                username = project.sonatypeUsername
                password = project.sonatypePassword
            }
        }

        people {
            person {
                id = 'lincolnminto'
                name = 'Lincoln Minto'
                roles = ['developer']
            }
        }
    }

    sourceXref {
        inputEncoding = 'UTF-8'
    }

    javadoc {
        excludes = ['**/*.html', 'META-INF/**']
        options {
            links('http://docs.oracle.com/javase/8/docs/api/',
                'http://docs.oracle.com/javase/8/javafx/api/')
        }
    }
}

allprojects {
    apply plugin: 'idea'
    
    dependencyUpdates.resolutionStrategy = {
        componentSelection { rules ->
            rules.all { selection ->
                boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                }
                if (rejected) {
                    selection.reject('Release candidate')
                }
            }
        }
    }
}

idea {
    project {
        jdkName '1.8'
        languageLevel '1.8'

        ipr {
            withXml { provider ->
                def node = provider.asNode()
                node.component.find { it.'@name' == 'VcsDirectoryMappings' }?.mapping[0].'@vcs' = 'Git'
            }
        }
    }
}

subprojects { subproj ->
    subproj.tasks.withType(JavaCompile) {
        sourceCompatibility = subproj.sourceCompatibility
        targetCompatibility = subproj.targetCompatibility
    }

    license {
        mapping {
            fxml = 'XML_STYLE'
        }
    }
}
